// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
)

const getMedia = `-- name: GetMedia :one
SELECT id, collectable_type, media_type, primary_group_id, subclipped_media_id, reference_media_id, sequence_number, start_time, end_time, asset_id, agerating, created_at, updated_at FROM media
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMedia(ctx context.Context, id int64) (Medium, error) {
	row := q.db.QueryRow(ctx, getMedia, id)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.CollectableType,
		&i.MediaType,
		&i.PrimaryGroupID,
		&i.SubclippedMediaID,
		&i.ReferenceMediaID,
		&i.SequenceNumber,
		&i.StartTime,
		&i.EndTime,
		&i.AssetID,
		&i.Agerating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMedias = `-- name: GetMedias :many
SELECT id, collectable_type, media_type, primary_group_id, subclipped_media_id, reference_media_id, sequence_number, start_time, end_time, asset_id, agerating, created_at, updated_at FROM media
ORDER BY name
`

func (q *Queries) GetMedias(ctx context.Context) ([]Medium, error) {
	rows, err := q.db.Query(ctx, getMedias)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.CollectableType,
			&i.MediaType,
			&i.PrimaryGroupID,
			&i.SubclippedMediaID,
			&i.ReferenceMediaID,
			&i.SequenceNumber,
			&i.StartTime,
			&i.EndTime,
			&i.AssetID,
			&i.Agerating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
