-- +goose Up
-- object: public.media | type: TABLE --
-- DROP TABLE IF EXISTS public.media CASCADE;
CREATE TABLE public.media (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	collectable_type text,
	media_type text,
	primary_group_id bigint,
	subclipped_media_id bigint,
	reference_media_id bigint,
	sequence_number smallint,
	start_time float,
	end_time float,
	asset_id bigint,
	agerating text,
	created_at timestamptz NOT NULL DEFAULT now(),
	updated_at timestamptz NOT NULL DEFAULT now(),
	CONSTRAINT media_pk PRIMARY KEY (id),
	CONSTRAINT ck_media_type CHECK (media_type IN ('standalone','episode', 'subclip', 'marker', 'show','season')),
	CONSTRAINT media_unique UNIQUE (id),
	CONSTRAINT ck_media_collectable_type CHECK (collectable_type = 'media')

);
-- ddl-end --
COMMENT ON COLUMN public.media.start_time IS E'for subclips and markers';
-- ddl-end --
COMMENT ON COLUMN public.media.end_time IS E'for subclips';
-- ddl-end --
ALTER TABLE public.media OWNER TO postgres;
-- ddl-end --

-- object: public.media_t | type: TABLE --
-- DROP TABLE IF EXISTS public.media_t CASCADE;
CREATE TABLE public.media_t (
	id bigint NOT NULL,
	media_id bigint,
	language_code text NOT NULL,
	title text,
	description text,
	long_description text,
	image_id bigint,
	CONSTRAINT media_t_pk PRIMARY KEY (id),
	CONSTRAINT uniq UNIQUE (language_code,media_id)

);
-- ddl-end --
ALTER TABLE public.media_t OWNER TO postgres;
-- ddl-end --

-- object: public.language | type: TABLE --
-- DROP TABLE IF EXISTS public.language CASCADE;
CREATE TABLE public.language (
	code text NOT NULL,
	name text NOT NULL,
	CONSTRAINT language_pk PRIMARY KEY (code)

);
-- ddl-end --
ALTER TABLE public.language OWNER TO postgres;
-- ddl-end --

-- object: public.query | type: TABLE --
-- DROP TABLE IF EXISTS public.query CASCADE;
CREATE TABLE public.query (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	template jsonb NOT NULL,
	parameters jsonb NOT NULL,
	system_defined boolean NOT NULL DEFAULT false,
	CONSTRAINT query_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.query OWNER TO postgres;
-- ddl-end --

-- object: public.collection | type: TABLE --
-- DROP TABLE IF EXISTS public.collection CASCADE;
CREATE TABLE public.collection (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	type text,
	query_id bigint,
	query_params jsonb,
	page_id bigint,
	CONSTRAINT collection_pk PRIMARY KEY (id),
	CONSTRAINT collection_type CHECK (type IN ('manual', 'dynamic'))

);
-- ddl-end --
ALTER TABLE public.collection OWNER TO postgres;
-- ddl-end --

-- object: public.section | type: TABLE --
-- DROP TABLE IF EXISTS public.section CASCADE;
CREATE TABLE public.section (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	type text NOT NULL,
	collection_id bigint,
	visibility_rules jsonb,
	CONSTRAINT section_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.section OWNER TO postgres;
-- ddl-end --

-- object: public.section_t | type: TABLE --
-- DROP TABLE IF EXISTS public.section_t CASCADE;
CREATE TABLE public.section_t (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	section_id bigint,
	language_code text NOT NULL,
	title text,
	CONSTRAINT section_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_section_t UNIQUE (language_code,section_id)

);
-- ddl-end --
ALTER TABLE public.section_t OWNER TO postgres;
-- ddl-end --

-- object: public.section_item | type: TABLE --
-- DROP TABLE IF EXISTS public.section_item CASCADE;
CREATE TABLE public.section_item (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	section_id bigint NOT NULL,
	type text NOT NULL,
	collectable_id bigint,
	url text,
	collection_id bigint,
	sort_order smallint,
	CONSTRAINT section_item_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.section_item OWNER TO postgres;
-- ddl-end --

-- object: public.section_item_t | type: TABLE --
-- DROP TABLE IF EXISTS public.section_item_t CASCADE;
CREATE TABLE public.section_item_t (
	id bigint NOT NULL,
	language_code text NOT NULL,
	section_item_id bigint,
	title text,
	CONSTRAINT section_item_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_section_item_t UNIQUE (language_code,section_item_id)

);
-- ddl-end --
ALTER TABLE public.section_item_t OWNER TO postgres;
-- ddl-end --

-- object: public.asset | type: TABLE --
-- DROP TABLE IF EXISTS public.asset CASCADE;
CREATE TABLE public.asset (
	id bigint NOT NULL,
	source_id text,
	published_version_id bigint,
	name smallint,
	CONSTRAINT asset_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.asset OWNER TO postgres;
-- ddl-end --

-- object: public.page | type: TABLE --
-- DROP TABLE IF EXISTS public.page CASCADE;
CREATE TABLE public.page (
	id bigint NOT NULL,
	collectable_type text,
	CONSTRAINT page_pk PRIMARY KEY (id),
	CONSTRAINT ck_page_type CHECK (collectable_type = 'page')

);
-- ddl-end --
ALTER TABLE public.page OWNER TO postgres;
-- ddl-end --

-- object: public.page_t | type: TABLE --
-- DROP TABLE IF EXISTS public.page_t CASCADE;
CREATE TABLE public.page_t (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	language_code text NOT NULL,
	page_id bigint,
	title text,
	description text,
	CONSTRAINT page_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_page_t UNIQUE (language_code,page_id)

);
-- ddl-end --
ALTER TABLE public.page_t OWNER TO postgres;
-- ddl-end --

-- object: public.page_section | type: TABLE --
-- DROP TABLE IF EXISTS public.page_section CASCADE;
CREATE TABLE public.page_section (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	page_id bigint,
	section_id bigint,
	CONSTRAINT page_section_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.page_section OWNER TO postgres;
-- ddl-end --

-- object: public.tag | type: TABLE --
-- DROP TABLE IF EXISTS public.tag CASCADE;
CREATE TABLE public.tag (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	type text,
	CONSTRAINT tag_pk PRIMARY KEY (id)

);
-- ddl-end --
COMMENT ON COLUMN public.tag.type IS E'speaker, composer, etc.';
-- ddl-end --
ALTER TABLE public.tag OWNER TO postgres;
-- ddl-end --

-- object: public.tag_t | type: TABLE --
-- DROP TABLE IF EXISTS public.tag_t CASCADE;
CREATE TABLE public.tag_t (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	tag_id bigint,
	language_code text NOT NULL,
	title text,
	CONSTRAINT tag_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_tag_t UNIQUE (language_code,tag_id)

);
-- ddl-end --
ALTER TABLE public.tag_t OWNER TO postgres;
-- ddl-end --

-- -- object: public.media_view | type: MATERIALIZED VIEW --
-- -- DROP MATERIALIZED VIEW IF EXISTS public.media_view CASCADE;
-- CREATE MATERIALIZED VIEW public.media_view
-- AS 
-- 
-- SELECT
--    public.media.*,
--    (select array_agg(tag_id) from public.tag_collectable where ct.collectable_id = media.id) AS tags,
--    (select array_agg(usergroup_id) from usergroup_media where usergroup_media.media_id = media.id) AS usergroups
-- FROM
--    public.media
-- WHERE
--    media.status = 1;
-- -- ddl-end --
-- ALTER MATERIALIZED VIEW public.media_view OWNER TO postgres;
-- -- ddl-end --
-- 
-- object: public.usergroup | type: TABLE --
-- DROP TABLE IF EXISTS public.usergroup CASCADE;
CREATE TABLE public.usergroup (
	id text NOT NULL,
	CONSTRAINT usergroup_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.usergroup OWNER TO postgres;
-- ddl-end --

-- object: public.collectable | type: TABLE --
-- DROP TABLE IF EXISTS public.collectable CASCADE;
CREATE TABLE public.collectable (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	type text,
	available_from timestamptz,
	available_to timestamptz,
	status smallint,
	created_at timestamptz NOT NULL DEFAULT now(),
	updated_at timestamptz NOT NULL DEFAULT now(),
	CONSTRAINT collectable_pk PRIMARY KEY (id),
	CONSTRAINT ck_collectable_type CHECK (type in ('media','page')),
	CONSTRAINT uq_collectable_type UNIQUE (id,type)

);
-- ddl-end --
ALTER TABLE public.collectable OWNER TO postgres;
-- ddl-end --

-- object: public.collection_collectable | type: TABLE --
-- DROP TABLE IF EXISTS public.collection_collectable CASCADE;
CREATE TABLE public.collection_collectable (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	collection_id bigint,
	collectable_id bigint,
	sort_order smallint,
	CONSTRAINT collection_collectable_pk PRIMARY KEY (id),
	CONSTRAINT uq_collection_collectable UNIQUE (collectable_id,collection_id)

);
-- ddl-end --
ALTER TABLE public.collection_collectable OWNER TO postgres;
-- ddl-end --

-- object: public.tag_collectable | type: TABLE --
-- DROP TABLE IF EXISTS public.tag_collectable CASCADE;
CREATE TABLE public.tag_collectable (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	collectable_id bigint,
	tag_id bigint,
	CONSTRAINT tag_collectable_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.tag_collectable OWNER TO postgres;
-- ddl-end --

-- object: public.usergroup_collectable | type: TABLE --
-- DROP TABLE IF EXISTS public.usergroup_collectable CASCADE;
CREATE TABLE public.usergroup_collectable (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	usergroup_id text,
	collectable_id bigint,
	CONSTRAINT usergroup_collectable_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.usergroup_collectable OWNER TO postgres;
-- ddl-end --

-- object: public.asset_version | type: TABLE --
-- DROP TABLE IF EXISTS public.asset_version CASCADE;
CREATE TABLE public.asset_version (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	asset_id bigint,
	CONSTRAINT asset_version_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.asset_version OWNER TO postgres;
-- ddl-end --

-- object: public.asset_format | type: TABLE --
-- DROP TABLE IF EXISTS public.asset_format CASCADE;
CREATE TABLE public.asset_format (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	name text,
	url text,
	bitrate bigint,
	CONSTRAINT asset_format_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.asset_format OWNER TO postgres;
-- ddl-end --

-- object: public.asset_version_format | type: TABLE --
-- DROP TABLE IF EXISTS public.asset_version_format CASCADE;
CREATE TABLE public.asset_version_format (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	assetversion_id bigint,
	assetformat_id bigint,
	CONSTRAINT asset_version_format_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.asset_version_format OWNER TO postgres;
-- ddl-end --

-- object: public.sectionitem_usergroup | type: TABLE --
-- DROP TABLE IF EXISTS public.sectionitem_usergroup CASCADE;
CREATE TABLE public.sectionitem_usergroup (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	sectionitem_id bigint,
	usergroup_id text,
	CONSTRAINT sectionitem_usergroup_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.sectionitem_usergroup OWNER TO postgres;
-- ddl-end --

-- object: user_data.media_progress | type: TABLE --
-- DROP TABLE IF EXISTS user_data.media_progress CASCADE;
CREATE TABLE user_data.media_progress (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	media_id bigint,
	user_id text,
	seconds integer,
	last_updated timestamptz,
	CONSTRAINT progress_pk PRIMARY KEY (id),
	CONSTRAINT mediaprogress_uq UNIQUE (media_id,user_id)

);
-- ddl-end --
ALTER TABLE user_data.media_progress OWNER TO postgres;
-- ddl-end --

-- object: user_data.list_media | type: TABLE --
-- DROP TABLE IF EXISTS user_data.list_media CASCADE;
CREATE TABLE user_data.list_media (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	media_id bigint NOT NULL,
	list_id bigint,
	sort_order smallint,
	CONSTRAINT list_media_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE user_data.list_media OWNER TO postgres;
-- ddl-end --

-- object: user_data.device | type: TABLE --
-- DROP TABLE IF EXISTS user_data.device CASCADE;
CREATE TABLE user_data.device (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	user_id text NOT NULL,
	push_token text,
	app text NOT NULL DEFAULT 'brunstadtv',
	CONSTRAINT uq_userdevice_token UNIQUE (push_token),
	CONSTRAINT device_pk PRIMARY KEY (id),
	CONSTRAINT app_check CHECK (app in ('brunstadtv'))

);
-- ddl-end --
ALTER TABLE user_data.device OWNER TO postgres;
-- ddl-end --

-- object: public.notification | type: TABLE --
-- DROP TABLE IF EXISTS public.notification CASCADE;
CREATE TABLE public.notification (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	cohort_id text NOT NULL,
	action text,
	internal_url text,
	external_url text,
	badge smallint,
	scheduled_time timestamptz,
	CONSTRAINT notifications_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.notification OWNER TO postgres;
-- ddl-end --

-- object: public.notification_t | type: TABLE --
-- DROP TABLE IF EXISTS public.notification_t CASCADE;
CREATE TABLE public.notification_t (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	notification_id bigint,
	language_code text NOT NULL,
	title text,
	message text,
	CONSTRAINT notification_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_notification_t UNIQUE (language_code,notification_id)

);
-- ddl-end --
ALTER TABLE public.notification_t OWNER TO postgres;
-- ddl-end --

-- object: public.notification_action | type: TABLE --
-- DROP TABLE IF EXISTS public.notification_action CASCADE;
CREATE TABLE public.notification_action (
	code text NOT NULL,
	name text,
	CONSTRAINT notification_action_pk PRIMARY KEY (code)

);
-- ddl-end --
ALTER TABLE public.notification_action OWNER TO postgres;
-- ddl-end --

-- object: public.calendar_event | type: TABLE --
-- DROP TABLE IF EXISTS public.calendar_event CASCADE;
CREATE TABLE public.calendar_event (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	event_id text,
	start timestamptz,
	"end" timestamptz,
	locked bool NOT NULL DEFAULT true,
	use_image_from_bcco bool NOT NULL DEFAULT false,
	image_id bigint,
	audience_id bigint,
	CONSTRAINT calendar_event_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.calendar_event OWNER TO postgres;
-- ddl-end --

-- object: public.tvguideentry | type: TABLE --
-- DROP TABLE IF EXISTS public.tvguideentry CASCADE;
CREATE TABLE public.tvguideentry (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	start timestamptz,
	"end" timestamptz,
	event_id bigint,
	media_id bigint,
	image_id bigint,
	use_image_from_media bool NOT NULL DEFAULT false,
	CONSTRAINT tvguideentry_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.tvguideentry OWNER TO postgres;
-- ddl-end --

-- object: user_data.list | type: TABLE --
-- DROP TABLE IF EXISTS user_data.list CASCADE;
CREATE TABLE user_data.list (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	name text NOT NULL,
	user_id text NOT NULL,
	CONSTRAINT list_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE user_data.list OWNER TO postgres;
-- ddl-end --

-- object: public.tvguideentry_t | type: TABLE --
-- DROP TABLE IF EXISTS public.tvguideentry_t CASCADE;
CREATE TABLE public.tvguideentry_t (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	tvguideentry_id bigint,
	language_code text NOT NULL,
	image_id bigint,
	title text,
	description text,
	CONSTRAINT tvguideentry_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_tvguideentry_t UNIQUE (language_code,tvguideentry_id)

);
-- ddl-end --
ALTER TABLE public.tvguideentry_t OWNER TO postgres;
-- ddl-end --

-- object: public.calendarevent_t | type: TABLE --
-- DROP TABLE IF EXISTS public.calendarevent_t CASCADE;
CREATE TABLE public.calendarevent_t (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	calendarevent_id bigint NOT NULL,
	language_code text NOT NULL,
	name text,
	image_id bigint,
	CONSTRAINT calendarevent_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_calendarevent_t UNIQUE (language_code,calendarevent_id)

);
-- ddl-end --
ALTER TABLE public.calendarevent_t OWNER TO postgres;
-- ddl-end --

-- object: public.systemdata | type: TABLE --
-- DROP TABLE IF EXISTS public.systemdata CASCADE;
CREATE TABLE public.systemdata (
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	live bool NOT NULL DEFAULT true,
	full_maintenance_mode bool NOT NULL DEFAULT false,
	meta_image_id bigint,
	CONSTRAINT system_data_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.systemdata OWNER TO postgres;
-- ddl-end --

-- object: public.image | type: TABLE --
-- DROP TABLE IF EXISTS public.image CASCADE;
CREATE TABLE public.image (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	url text NOT NULL,
	CONSTRAINT image_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.image OWNER TO postgres;
-- ddl-end --

-- object: user_data.usergroup_users | type: TABLE --
-- DROP TABLE IF EXISTS user_data.usergroup_users CASCADE;
CREATE TABLE user_data.usergroup_users (
	id bigint NOT NULL,
	usergroup_id text NOT NULL,
	user_id text NOT NULL,
	CONSTRAINT uq_usergroup_users UNIQUE (user_id,usergroup_id),
	CONSTRAINT usergroup_users_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE user_data.usergroup_users OWNER TO postgres;
-- ddl-end --

-- object: public.faqcategory | type: TABLE --
-- DROP TABLE IF EXISTS public.faqcategory CASCADE;
CREATE TABLE public.faqcategory (
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	sort_order smallint,
	status smallint,
	CONSTRAINT faqcategory_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.faqcategory OWNER TO postgres;
-- ddl-end --

-- object: public.agerating | type: TABLE --
-- DROP TABLE IF EXISTS public.agerating CASCADE;
CREATE TABLE public.agerating (
	code text NOT NULL,
	title text,
	sort_order smallint,
	CONSTRAINT agerating_pk PRIMARY KEY (code)

);
-- ddl-end --
ALTER TABLE public.agerating OWNER TO postgres;
-- ddl-end --

-- object: public.agerating_t | type: TABLE --
-- DROP TABLE IF EXISTS public.agerating_t CASCADE;
CREATE TABLE public.agerating_t (
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	agerating_code text,
	language_code text NOT NULL,
	CONSTRAINT agerating_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_agerating_t UNIQUE (language_code,agerating_code)

);
-- ddl-end --
ALTER TABLE public.agerating_t OWNER TO postgres;
-- ddl-end --

-- object: public.faq | type: TABLE --
-- DROP TABLE IF EXISTS public.faq CASCADE;
CREATE TABLE public.faq (
	id smallint NOT NULL,
	category smallint,
	CONSTRAINT faq_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE public.faq OWNER TO postgres;
-- ddl-end --

-- object: public.faq_t | type: TABLE --
-- DROP TABLE IF EXISTS public.faq_t CASCADE;
CREATE TABLE public.faq_t (
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	faq_id smallint,
	language_code text NOT NULL,
	question text,
	answer text,
	CONSTRAINT faq_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_faq_t UNIQUE (language_code,faq_id)

);
-- ddl-end --
ALTER TABLE public.faq_t OWNER TO postgres;
-- ddl-end --

-- object: public.faqcategory_t | type: TABLE --
-- DROP TABLE IF EXISTS public.faqcategory_t CASCADE;
CREATE TABLE public.faqcategory_t (
	id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	faqcategory_id smallint,
	language_code text NOT NULL,
	title smallint,
	CONSTRAINT faqcategory_t_pk PRIMARY KEY (id),
	CONSTRAINT uq_faqcategory_t UNIQUE (language_code,faqcategory_id)

);
-- ddl-end --
ALTER TABLE public.faqcategory_t OWNER TO postgres;
-- ddl-end --

-- object: user_data.user_list | type: TABLE --
-- DROP TABLE IF EXISTS user_data.user_list CASCADE;
CREATE TABLE user_data.user_list (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
	user_id text NOT NULL,
	list_id bigint,
	sort_order smallint NOT NULL,
	CONSTRAINT user_list_pk PRIMARY KEY (id)

);
-- ddl-end --
ALTER TABLE user_data.user_list OWNER TO postgres;
-- ddl-end --

-- +goose StatementBegin
-- object: public.set_current_timestamp_updated_at | type: FUNCTION --
-- DROP FUNCTION IF EXISTS public.set_current_timestamp_updated_at() CASCADE;
CREATE FUNCTION public.set_current_timestamp_updated_at ()
	RETURNS trigger
	LANGUAGE plpgsql
	VOLATILE 
	SECURITY INVOKER
	PARALLEL UNSAFE
	COST 1
	AS $$
        BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
        END;
    $$;
-- +goose StatementEnd
-- ddl-end --
ALTER FUNCTION public.set_current_timestamp_updated_at() OWNER TO postgres;
-- ddl-end --
COMMENT ON FUNCTION public.set_current_timestamp_updated_at() IS E'Copied from Hasura';
-- ddl-end --

-- object: set_public_media_updated_at | type: TRIGGER --
-- DROP TRIGGER IF EXISTS set_public_media_updated_at ON public.media CASCADE;
CREATE TRIGGER set_public_media_updated_at
	BEFORE UPDATE
	ON public.media
	FOR EACH STATEMENT
	EXECUTE PROCEDURE public.set_current_timestamp_updated_at();
-- ddl-end --

-- object: set_public_collectable_updated_at | type: TRIGGER --
-- DROP TRIGGER IF EXISTS set_public_collectable_updated_at ON public.collectable CASCADE;
CREATE TRIGGER set_public_collectable_updated_at
	BEFORE UPDATE
	ON public.collectable
	FOR EACH STATEMENT
	EXECUTE PROCEDURE public.set_current_timestamp_updated_at();
-- ddl-end --

-- object: media_group_primary_fk | type: CONSTRAINT --
-- ALTER TABLE public.media DROP CONSTRAINT IF EXISTS media_group_primary_fk CASCADE;
ALTER TABLE public.media ADD CONSTRAINT media_group_primary_fk FOREIGN KEY (primary_group_id)
REFERENCES public.media (id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
-- ddl-end --

-- object: fk_media_asset | type: CONSTRAINT --
-- ALTER TABLE public.media DROP CONSTRAINT IF EXISTS fk_media_asset CASCADE;
ALTER TABLE public.media ADD CONSTRAINT fk_media_asset FOREIGN KEY (asset_id)
REFERENCES public.asset (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_media_parent | type: CONSTRAINT --
-- ALTER TABLE public.media DROP CONSTRAINT IF EXISTS fk_media_parent CASCADE;
ALTER TABLE public.media ADD CONSTRAINT fk_media_parent FOREIGN KEY (subclipped_media_id)
REFERENCES public.media (id) MATCH SIMPLE
ON DELETE CASCADE ON UPDATE CASCADE;
-- ddl-end --

-- object: fk_collectable_media | type: CONSTRAINT --
-- ALTER TABLE public.media DROP CONSTRAINT IF EXISTS fk_collectable_media CASCADE;
ALTER TABLE public.media ADD CONSTRAINT fk_collectable_media FOREIGN KEY (id,collectable_type)
REFERENCES public.collectable (id,type) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_media_referencemedia | type: CONSTRAINT --
-- ALTER TABLE public.media DROP CONSTRAINT IF EXISTS fk_media_referencemedia CASCADE;
ALTER TABLE public.media ADD CONSTRAINT fk_media_referencemedia FOREIGN KEY (reference_media_id)
REFERENCES public.media (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_media_agerating | type: CONSTRAINT --
-- ALTER TABLE public.media DROP CONSTRAINT IF EXISTS fk_media_agerating CASCADE;
ALTER TABLE public.media ADD CONSTRAINT fk_media_agerating FOREIGN KEY (agerating)
REFERENCES public.agerating (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: media_has_translation | type: CONSTRAINT --
-- ALTER TABLE public.media_t DROP CONSTRAINT IF EXISTS media_has_translation CASCADE;
ALTER TABLE public.media_t ADD CONSTRAINT media_has_translation FOREIGN KEY (media_id)
REFERENCES public.media (id) MATCH FULL
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: language_has_translations | type: CONSTRAINT --
-- ALTER TABLE public.media_t DROP CONSTRAINT IF EXISTS language_has_translations CASCADE;
ALTER TABLE public.media_t ADD CONSTRAINT language_has_translations FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH FULL
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_mediatranslation_image | type: CONSTRAINT --
-- ALTER TABLE public.media_t DROP CONSTRAINT IF EXISTS fk_mediatranslation_image CASCADE;
ALTER TABLE public.media_t ADD CONSTRAINT fk_mediatranslation_image FOREIGN KEY (image_id)
REFERENCES public.image (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_collection_query | type: CONSTRAINT --
-- ALTER TABLE public.collection DROP CONSTRAINT IF EXISTS fk_collection_query CASCADE;
ALTER TABLE public.collection ADD CONSTRAINT fk_collection_query FOREIGN KEY (query_id)
REFERENCES public.query (id) MATCH SIMPLE
ON DELETE RESTRICT ON UPDATE CASCADE;
-- ddl-end --

-- object: fk_collection_page | type: CONSTRAINT --
-- ALTER TABLE public.collection DROP CONSTRAINT IF EXISTS fk_collection_page CASCADE;
ALTER TABLE public.collection ADD CONSTRAINT fk_collection_page FOREIGN KEY (page_id)
REFERENCES public.page (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_section_collection | type: CONSTRAINT --
-- ALTER TABLE public.section DROP CONSTRAINT IF EXISTS fk_section_collection CASCADE;
ALTER TABLE public.section ADD CONSTRAINT fk_section_collection FOREIGN KEY (collection_id)
REFERENCES public.collection (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectiontranslation_section | type: CONSTRAINT --
-- ALTER TABLE public.section_t DROP CONSTRAINT IF EXISTS fk_sectiontranslation_section CASCADE;
ALTER TABLE public.section_t ADD CONSTRAINT fk_sectiontranslation_section FOREIGN KEY (section_id)
REFERENCES public.section (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectiontranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.section_t DROP CONSTRAINT IF EXISTS fk_sectiontranslation_language CASCADE;
ALTER TABLE public.section_t ADD CONSTRAINT fk_sectiontranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitem_section | type: CONSTRAINT --
-- ALTER TABLE public.section_item DROP CONSTRAINT IF EXISTS fk_sectionitem_section CASCADE;
ALTER TABLE public.section_item ADD CONSTRAINT fk_sectionitem_section FOREIGN KEY (section_id)
REFERENCES public.section (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitem_collectable | type: CONSTRAINT --
-- ALTER TABLE public.section_item DROP CONSTRAINT IF EXISTS fk_sectionitem_collectable CASCADE;
ALTER TABLE public.section_item ADD CONSTRAINT fk_sectionitem_collectable FOREIGN KEY (collectable_id)
REFERENCES public.collectable (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitem_collection | type: CONSTRAINT --
-- ALTER TABLE public.section_item DROP CONSTRAINT IF EXISTS fk_sectionitem_collection CASCADE;
ALTER TABLE public.section_item ADD CONSTRAINT fk_sectionitem_collection FOREIGN KEY (collection_id)
REFERENCES public.collection (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitemtranslation_sectionitem | type: CONSTRAINT --
-- ALTER TABLE public.section_item_t DROP CONSTRAINT IF EXISTS fk_sectionitemtranslation_sectionitem CASCADE;
ALTER TABLE public.section_item_t ADD CONSTRAINT fk_sectionitemtranslation_sectionitem FOREIGN KEY (section_item_id)
REFERENCES public.section_item (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitemtranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.section_item_t DROP CONSTRAINT IF EXISTS fk_sectionitemtranslation_language CASCADE;
ALTER TABLE public.section_item_t ADD CONSTRAINT fk_sectionitemtranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_asset_version_published | type: CONSTRAINT --
-- ALTER TABLE public.asset DROP CONSTRAINT IF EXISTS fk_asset_version_published CASCADE;
ALTER TABLE public.asset ADD CONSTRAINT fk_asset_version_published FOREIGN KEY (published_version_id)
REFERENCES public.asset_version (id) MATCH SIMPLE
ON DELETE RESTRICT ON UPDATE RESTRICT;
-- ddl-end --

-- object: fk_collectable_page | type: CONSTRAINT --
-- ALTER TABLE public.page DROP CONSTRAINT IF EXISTS fk_collectable_page CASCADE;
ALTER TABLE public.page ADD CONSTRAINT fk_collectable_page FOREIGN KEY (id,collectable_type)
REFERENCES public.collectable (id,type) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_page | type: CONSTRAINT --
-- ALTER TABLE public.page_t DROP CONSTRAINT IF EXISTS fk_page CASCADE;
ALTER TABLE public.page_t ADD CONSTRAINT fk_page FOREIGN KEY (page_id)
REFERENCES public.page (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_page_lang | type: CONSTRAINT --
-- ALTER TABLE public.page_t DROP CONSTRAINT IF EXISTS fk_page_lang CASCADE;
ALTER TABLE public.page_t ADD CONSTRAINT fk_page_lang FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_pagesection_page | type: CONSTRAINT --
-- ALTER TABLE public.page_section DROP CONSTRAINT IF EXISTS fk_pagesection_page CASCADE;
ALTER TABLE public.page_section ADD CONSTRAINT fk_pagesection_page FOREIGN KEY (page_id)
REFERENCES public.page (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_pagesection_section | type: CONSTRAINT --
-- ALTER TABLE public.page_section DROP CONSTRAINT IF EXISTS fk_pagesection_section CASCADE;
ALTER TABLE public.page_section ADD CONSTRAINT fk_pagesection_section FOREIGN KEY (section_id)
REFERENCES public.section (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tagtranslation_tag | type: CONSTRAINT --
-- ALTER TABLE public.tag_t DROP CONSTRAINT IF EXISTS fk_tagtranslation_tag CASCADE;
ALTER TABLE public.tag_t ADD CONSTRAINT fk_tagtranslation_tag FOREIGN KEY (tag_id)
REFERENCES public.tag (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tagtranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.tag_t DROP CONSTRAINT IF EXISTS fk_tagtranslation_language CASCADE;
ALTER TABLE public.tag_t ADD CONSTRAINT fk_tagtranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_collectioncollectable_collection | type: CONSTRAINT --
-- ALTER TABLE public.collection_collectable DROP CONSTRAINT IF EXISTS fk_collectioncollectable_collection CASCADE;
ALTER TABLE public.collection_collectable ADD CONSTRAINT fk_collectioncollectable_collection FOREIGN KEY (collection_id)
REFERENCES public.collection (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_collectioncollectable_collectable | type: CONSTRAINT --
-- ALTER TABLE public.collection_collectable DROP CONSTRAINT IF EXISTS fk_collectioncollectable_collectable CASCADE;
ALTER TABLE public.collection_collectable ADD CONSTRAINT fk_collectioncollectable_collectable FOREIGN KEY (collectable_id)
REFERENCES public.collectable (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tagcollectable_collectable | type: CONSTRAINT --
-- ALTER TABLE public.tag_collectable DROP CONSTRAINT IF EXISTS fk_tagcollectable_collectable CASCADE;
ALTER TABLE public.tag_collectable ADD CONSTRAINT fk_tagcollectable_collectable FOREIGN KEY (collectable_id)
REFERENCES public.collectable (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tagcollectable_tag | type: CONSTRAINT --
-- ALTER TABLE public.tag_collectable DROP CONSTRAINT IF EXISTS fk_tagcollectable_tag CASCADE;
ALTER TABLE public.tag_collectable ADD CONSTRAINT fk_tagcollectable_tag FOREIGN KEY (tag_id)
REFERENCES public.tag (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_usergroupcollectable_usergroup | type: CONSTRAINT --
-- ALTER TABLE public.usergroup_collectable DROP CONSTRAINT IF EXISTS fk_usergroupcollectable_usergroup CASCADE;
ALTER TABLE public.usergroup_collectable ADD CONSTRAINT fk_usergroupcollectable_usergroup FOREIGN KEY (usergroup_id)
REFERENCES public.usergroup (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_usergroupcollectable_collectable | type: CONSTRAINT --
-- ALTER TABLE public.usergroup_collectable DROP CONSTRAINT IF EXISTS fk_usergroupcollectable_collectable CASCADE;
ALTER TABLE public.usergroup_collectable ADD CONSTRAINT fk_usergroupcollectable_collectable FOREIGN KEY (collectable_id)
REFERENCES public.collectable (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_assetversion_asset | type: CONSTRAINT --
-- ALTER TABLE public.asset_version DROP CONSTRAINT IF EXISTS fk_assetversion_asset CASCADE;
ALTER TABLE public.asset_version ADD CONSTRAINT fk_assetversion_asset FOREIGN KEY (asset_id)
REFERENCES public.asset (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_assetversionformat_version | type: CONSTRAINT --
-- ALTER TABLE public.asset_version_format DROP CONSTRAINT IF EXISTS fk_assetversionformat_version CASCADE;
ALTER TABLE public.asset_version_format ADD CONSTRAINT fk_assetversionformat_version FOREIGN KEY (assetversion_id)
REFERENCES public.asset_version (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_assetversionformat_format | type: CONSTRAINT --
-- ALTER TABLE public.asset_version_format DROP CONSTRAINT IF EXISTS fk_assetversionformat_format CASCADE;
ALTER TABLE public.asset_version_format ADD CONSTRAINT fk_assetversionformat_format FOREIGN KEY (assetformat_id)
REFERENCES public.asset_format (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitemusergroup_sectionitem | type: CONSTRAINT --
-- ALTER TABLE public.sectionitem_usergroup DROP CONSTRAINT IF EXISTS fk_sectionitemusergroup_sectionitem CASCADE;
ALTER TABLE public.sectionitem_usergroup ADD CONSTRAINT fk_sectionitemusergroup_sectionitem FOREIGN KEY (sectionitem_id)
REFERENCES public.section_item (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_sectionitemusergroup_usergroup | type: CONSTRAINT --
-- ALTER TABLE public.sectionitem_usergroup DROP CONSTRAINT IF EXISTS fk_sectionitemusergroup_usergroup CASCADE;
ALTER TABLE public.sectionitem_usergroup ADD CONSTRAINT fk_sectionitemusergroup_usergroup FOREIGN KEY (usergroup_id)
REFERENCES public.usergroup (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_mediaprogress_media | type: CONSTRAINT --
-- ALTER TABLE user_data.media_progress DROP CONSTRAINT IF EXISTS fk_mediaprogress_media CASCADE;
ALTER TABLE user_data.media_progress ADD CONSTRAINT fk_mediaprogress_media FOREIGN KEY (media_id)
REFERENCES public.media (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_medialist_media | type: CONSTRAINT --
-- ALTER TABLE user_data.list_media DROP CONSTRAINT IF EXISTS fk_medialist_media CASCADE;
ALTER TABLE user_data.list_media ADD CONSTRAINT fk_medialist_media FOREIGN KEY (media_id)
REFERENCES public.media (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_listmedia_list | type: CONSTRAINT --
-- ALTER TABLE user_data.list_media DROP CONSTRAINT IF EXISTS fk_listmedia_list CASCADE;
ALTER TABLE user_data.list_media ADD CONSTRAINT fk_listmedia_list FOREIGN KEY (list_id)
REFERENCES user_data.list (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_notificationtranslation_notification | type: CONSTRAINT --
-- ALTER TABLE public.notification_t DROP CONSTRAINT IF EXISTS fk_notificationtranslation_notification CASCADE;
ALTER TABLE public.notification_t ADD CONSTRAINT fk_notificationtranslation_notification FOREIGN KEY (notification_id)
REFERENCES public.notification (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_notificationtranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.notification_t DROP CONSTRAINT IF EXISTS fk_notificationtranslation_language CASCADE;
ALTER TABLE public.notification_t ADD CONSTRAINT fk_notificationtranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tvguideentry_media | type: CONSTRAINT --
-- ALTER TABLE public.tvguideentry DROP CONSTRAINT IF EXISTS fk_tvguideentry_media CASCADE;
ALTER TABLE public.tvguideentry ADD CONSTRAINT fk_tvguideentry_media FOREIGN KEY (media_id)
REFERENCES public.media (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tvguideentry_event | type: CONSTRAINT --
-- ALTER TABLE public.tvguideentry DROP CONSTRAINT IF EXISTS fk_tvguideentry_event CASCADE;
ALTER TABLE public.tvguideentry ADD CONSTRAINT fk_tvguideentry_event FOREIGN KEY (event_id)
REFERENCES public.calendar_event (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tvguideentrytranslation_tvguideentry | type: CONSTRAINT --
-- ALTER TABLE public.tvguideentry_t DROP CONSTRAINT IF EXISTS fk_tvguideentrytranslation_tvguideentry CASCADE;
ALTER TABLE public.tvguideentry_t ADD CONSTRAINT fk_tvguideentrytranslation_tvguideentry FOREIGN KEY (tvguideentry_id)
REFERENCES public.tvguideentry (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tvguideentrytranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.tvguideentry_t DROP CONSTRAINT IF EXISTS fk_tvguideentrytranslation_language CASCADE;
ALTER TABLE public.tvguideentry_t ADD CONSTRAINT fk_tvguideentrytranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_tvguideentrytranslation_image | type: CONSTRAINT --
-- ALTER TABLE public.tvguideentry_t DROP CONSTRAINT IF EXISTS fk_tvguideentrytranslation_image CASCADE;
ALTER TABLE public.tvguideentry_t ADD CONSTRAINT fk_tvguideentrytranslation_image FOREIGN KEY (image_id)
REFERENCES public.image (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_calendareventtranslation_calendarevent | type: CONSTRAINT --
-- ALTER TABLE public.calendarevent_t DROP CONSTRAINT IF EXISTS fk_calendareventtranslation_calendarevent CASCADE;
ALTER TABLE public.calendarevent_t ADD CONSTRAINT fk_calendareventtranslation_calendarevent FOREIGN KEY (calendarevent_id)
REFERENCES public.calendar_event (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_calendareventtranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.calendarevent_t DROP CONSTRAINT IF EXISTS fk_calendareventtranslation_language CASCADE;
ALTER TABLE public.calendarevent_t ADD CONSTRAINT fk_calendareventtranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_calendareventtranslation_image | type: CONSTRAINT --
-- ALTER TABLE public.calendarevent_t DROP CONSTRAINT IF EXISTS fk_calendareventtranslation_image CASCADE;
ALTER TABLE public.calendarevent_t ADD CONSTRAINT fk_calendareventtranslation_image FOREIGN KEY (image_id)
REFERENCES public.image (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_systemdata_metaimage | type: CONSTRAINT --
-- ALTER TABLE public.systemdata DROP CONSTRAINT IF EXISTS fk_systemdata_metaimage CASCADE;
ALTER TABLE public.systemdata ADD CONSTRAINT fk_systemdata_metaimage FOREIGN KEY (meta_image_id)
REFERENCES public.image (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: usergroup | type: CONSTRAINT --
-- ALTER TABLE user_data.usergroup_users DROP CONSTRAINT IF EXISTS usergroup CASCADE;
ALTER TABLE user_data.usergroup_users ADD CONSTRAINT usergroup FOREIGN KEY (usergroup_id)
REFERENCES public.usergroup (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_ageratingtranslation_agerating | type: CONSTRAINT --
-- ALTER TABLE public.agerating_t DROP CONSTRAINT IF EXISTS fk_ageratingtranslation_agerating CASCADE;
ALTER TABLE public.agerating_t ADD CONSTRAINT fk_ageratingtranslation_agerating FOREIGN KEY (agerating_code)
REFERENCES public.agerating (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_ageratingtranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.agerating_t DROP CONSTRAINT IF EXISTS fk_ageratingtranslation_language CASCADE;
ALTER TABLE public.agerating_t ADD CONSTRAINT fk_ageratingtranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_faq_category | type: CONSTRAINT --
-- ALTER TABLE public.faq DROP CONSTRAINT IF EXISTS fk_faq_category CASCADE;
ALTER TABLE public.faq ADD CONSTRAINT fk_faq_category FOREIGN KEY (category)
REFERENCES public.faqcategory (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_faqtranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.faq_t DROP CONSTRAINT IF EXISTS fk_faqtranslation_language CASCADE;
ALTER TABLE public.faq_t ADD CONSTRAINT fk_faqtranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_faqtranslation_faq | type: CONSTRAINT --
-- ALTER TABLE public.faq_t DROP CONSTRAINT IF EXISTS fk_faqtranslation_faq CASCADE;
ALTER TABLE public.faq_t ADD CONSTRAINT fk_faqtranslation_faq FOREIGN KEY (faq_id)
REFERENCES public.faq (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_faqcategorytranslation_faqcategory | type: CONSTRAINT --
-- ALTER TABLE public.faqcategory_t DROP CONSTRAINT IF EXISTS fk_faqcategorytranslation_faqcategory CASCADE;
ALTER TABLE public.faqcategory_t ADD CONSTRAINT fk_faqcategorytranslation_faqcategory FOREIGN KEY (faqcategory_id)
REFERENCES public.faqcategory (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_faqcategorytranslation_language | type: CONSTRAINT --
-- ALTER TABLE public.faqcategory_t DROP CONSTRAINT IF EXISTS fk_faqcategorytranslation_language CASCADE;
ALTER TABLE public.faqcategory_t ADD CONSTRAINT fk_faqcategorytranslation_language FOREIGN KEY (language_code)
REFERENCES public.language (code) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --

-- object: fk_userlist_list | type: CONSTRAINT --
-- ALTER TABLE user_data.user_list DROP CONSTRAINT IF EXISTS fk_userlist_list CASCADE;
ALTER TABLE user_data.user_list ADD CONSTRAINT fk_userlist_list FOREIGN KEY (list_id)
REFERENCES user_data.list (id) MATCH SIMPLE
ON DELETE NO ACTION ON UPDATE NO ACTION;
-- ddl-end --


